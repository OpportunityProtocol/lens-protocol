// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ContractCreated extends ethereum.Event {
  get params(): ContractCreated__Params {
    return new ContractCreated__Params(this);
  }
}

export class ContractCreated__Params {
  _event: ContractCreated;

  constructor(event: ContractCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get marketId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get metadataPtr(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class ContractOwnershipUpdate extends ethereum.Event {
  get params(): ContractOwnershipUpdate__Params {
    return new ContractOwnershipUpdate__Params(this);
  }
}

export class ContractOwnershipUpdate__Params {
  _event: ContractOwnershipUpdate;

  constructor(event: ContractOwnershipUpdate) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get marketId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ownership(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get employer(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get worker(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Dispute extends ethereum.Event {
  get params(): Dispute__Params {
    return new Dispute__Params(this);
  }
}

export class Dispute__Params {
  _event: Dispute;

  constructor(event: Dispute) {
    this._event = event;
  }

  get _arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _disputeID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _metaEvidenceID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _evidenceGroupID(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Evidence extends ethereum.Event {
  get params(): Evidence__Params {
    return new Evidence__Params(this);
  }
}

export class Evidence__Params {
  _event: Evidence;

  constructor(event: Evidence) {
    this._event = event;
  }

  get _arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _evidenceGroupID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _party(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _evidence(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class MetaEvidence extends ethereum.Event {
  get params(): MetaEvidence__Params {
    return new MetaEvidence__Params(this);
  }
}

export class MetaEvidence__Params {
  _event: MetaEvidence;

  constructor(event: MetaEvidence) {
    this._event = event;
  }

  get _metaEvidenceID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _evidence(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Ruling extends ethereum.Event {
  get params(): Ruling__Params {
    return new Ruling__Params(this);
  }
}

export class Ruling__Params {
  _event: Ruling;

  constructor(event: Ruling) {
    this._event = event;
  }

  get _arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _disputeID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _ruling(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ServiceCreated extends ethereum.Event {
  get params(): ServiceCreated__Params {
    return new ServiceCreated__Params(this);
  }
}

export class ServiceCreated__Params {
  _event: ServiceCreated;

  constructor(event: ServiceCreated) {
    this._event = event;
  }

  get serviceId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get marketId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get offers(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get metadataPtr(): string {
    return this._event.parameters[4].value.toString();
  }

  get pubId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ServicePurchased extends ethereum.Event {
  get params(): ServicePurchased__Params {
    return new ServicePurchased__Params(this);
  }
}

export class ServicePurchased__Params {
  _event: ServicePurchased;

  constructor(event: ServicePurchased) {
    this._event = event;
  }

  get serviceId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get purchaseId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get pubId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get purchaser(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get referral(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get offer(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ServiceResolved extends ethereum.Event {
  get params(): ServiceResolved__Params {
    return new ServiceResolved__Params(this);
  }
}

export class ServiceResolved__Params {
  _event: ServiceResolved;

  constructor(event: ServiceResolved) {
    this._event = event;
  }

  get serviceOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get serviceClient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get purchaseId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get serviceId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get packageAmount(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class UserRegistered extends ethereum.Event {
  get params(): UserRegistered__Params {
    return new UserRegistered__Params(this);
  }
}

export class UserRegistered__Params {
  _event: UserRegistered;

  constructor(event: UserRegistered) {
    this._event = event;
  }

  get registeredAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lensHandle(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get profileId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get imageURI(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class NetworkManager__getContractDataResultValue0Struct extends ethereum.Tuple {
  get employer(): Address {
    return this[0].toAddress();
  }

  get worker(): Address {
    return this[1].toAddress();
  }

  get taskMetadataPtr(): string {
    return this[2].toString();
  }

  get contractOwnership(): i32 {
    return this[3].toI32();
  }

  get wad(): BigInt {
    return this[4].toBigInt();
  }

  get acceptanceTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get resolutionTimestamp(): BigInt {
    return this[6].toBigInt();
  }

  get marketId(): BigInt {
    return this[7].toBigInt();
  }
}

export class NetworkManager__getContractsResultValue0Struct extends ethereum.Tuple {
  get employer(): Address {
    return this[0].toAddress();
  }

  get worker(): Address {
    return this[1].toAddress();
  }

  get taskMetadataPtr(): string {
    return this[2].toString();
  }

  get contractOwnership(): i32 {
    return this[3].toI32();
  }

  get wad(): BigInt {
    return this[4].toBigInt();
  }

  get acceptanceTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get resolutionTimestamp(): BigInt {
    return this[6].toBigInt();
  }

  get marketId(): BigInt {
    return this[7].toBigInt();
  }
}

export class NetworkManager__getServiceDataResultValue0Struct extends ethereum.Tuple {
  get marketId(): BigInt {
    return this[0].toBigInt();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get metadataPtr(): string {
    return this[2].toString();
  }

  get offers(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get referralShare(): BigInt {
    return this[4].toBigInt();
  }

  get exist(): boolean {
    return this[5].toBoolean();
  }

  get id(): BigInt {
    return this[6].toBigInt();
  }

  get collectModule(): Address {
    return this[7].toAddress();
  }

  get pubId(): BigInt {
    return this[8].toBigInt();
  }
}

export class NetworkManager__getServicePurchaseMetadataResultValue0Struct extends ethereum.Tuple {
  get purchaseId(): BigInt {
    return this[0].toBigInt();
  }

  get client(): Address {
    return this[1].toAddress();
  }

  get creator(): Address {
    return this[2].toAddress();
  }

  get exist(): boolean {
    return this[3].toBoolean();
  }

  get timestampPurchased(): BigInt {
    return this[4].toBigInt();
  }

  get referral(): Address {
    return this[5].toAddress();
  }

  get offer(): i32 {
    return this[6].toI32();
  }

  get status(): i32 {
    return this[7].toI32();
  }
}

export class NetworkManager__getServicesResultValue0Struct extends ethereum.Tuple {
  get marketId(): BigInt {
    return this[0].toBigInt();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get metadataPtr(): string {
    return this[2].toString();
  }

  get offers(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get referralShare(): BigInt {
    return this[4].toBigInt();
  }

  get exist(): boolean {
    return this[5].toBoolean();
  }

  get id(): BigInt {
    return this[6].toBigInt();
  }

  get collectModule(): Address {
    return this[7].toAddress();
  }

  get pubId(): BigInt {
    return this[8].toBigInt();
  }
}

export class NetworkManager__purchaseServiceOfferingInputSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }

  get deadline(): BigInt {
    return this[3].toBigInt();
  }
}

export class NetworkManager__purchasedServiceIdToMetdataResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: boolean;
  value4: BigInt;
  value5: Address;
  value6: i32;
  value7: i32;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: boolean,
    value4: BigInt,
    value5: Address,
    value6: i32,
    value7: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    return map;
  }

  getPurchaseId(): BigInt {
    return this.value0;
  }

  getClient(): Address {
    return this.value1;
  }

  getCreator(): Address {
    return this.value2;
  }

  getExist(): boolean {
    return this.value3;
  }

  getTimestampPurchased(): BigInt {
    return this.value4;
  }

  getReferral(): Address {
    return this.value5;
  }

  getOffer(): i32 {
    return this.value6;
  }

  getStatus(): i32 {
    return this.value7;
  }
}

export class NetworkManager__relationshipIDToEscrowDetailsResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: i32,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getStatus(): i32 {
    return this.value0;
  }

  getDisputeID(): BigInt {
    return this.value1;
  }

  getCreatedAt(): BigInt {
    return this.value2;
  }

  getReclaimedAt(): BigInt {
    return this.value3;
  }

  getPayerFeeDeposit(): BigInt {
    return this.value4;
  }

  getPayeeFeeDeposit(): BigInt {
    return this.value5;
  }
}

export class NetworkManager__relationshipIDToRelationshipResult {
  value0: Address;
  value1: Address;
  value2: string;
  value3: i32;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: string,
    value3: i32,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getEmployer(): Address {
    return this.value0;
  }

  getWorker(): Address {
    return this.value1;
  }

  getTaskMetadataPtr(): string {
    return this.value2;
  }

  getContractOwnership(): i32 {
    return this.value3;
  }

  getWad(): BigInt {
    return this.value4;
  }

  getAcceptanceTimestamp(): BigInt {
    return this.value5;
  }

  getResolutionTimestamp(): BigInt {
    return this.value6;
  }

  getMarketId(): BigInt {
    return this.value7;
  }
}

export class NetworkManager__relationshipsResult {
  value0: Address;
  value1: Address;
  value2: string;
  value3: i32;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: string,
    value3: i32,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getEmployer(): Address {
    return this.value0;
  }

  getWorker(): Address {
    return this.value1;
  }

  getTaskMetadataPtr(): string {
    return this.value2;
  }

  getContractOwnership(): i32 {
    return this.value3;
  }

  getWad(): BigInt {
    return this.value4;
  }

  getAcceptanceTimestamp(): BigInt {
    return this.value5;
  }

  getResolutionTimestamp(): BigInt {
    return this.value6;
  }

  getMarketId(): BigInt {
    return this.value7;
  }
}

export class NetworkManager__serviceIdToServiceResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: BigInt;
  value4: boolean;
  value5: BigInt;
  value6: Address;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: string,
    value3: BigInt,
    value4: boolean,
    value5: BigInt,
    value6: Address,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getMarketId(): BigInt {
    return this.value0;
  }

  getCreator(): Address {
    return this.value1;
  }

  getMetadataPtr(): string {
    return this.value2;
  }

  getReferralShare(): BigInt {
    return this.value3;
  }

  getExist(): boolean {
    return this.value4;
  }

  getId(): BigInt {
    return this.value5;
  }

  getCollectModule(): Address {
    return this.value6;
  }

  getPubId(): BigInt {
    return this.value7;
  }
}

export class NetworkManager__servicesResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: BigInt;
  value4: boolean;
  value5: BigInt;
  value6: Address;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: string,
    value3: BigInt,
    value4: boolean,
    value5: BigInt,
    value6: Address,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getMarketId(): BigInt {
    return this.value0;
  }

  getCreator(): Address {
    return this.value1;
  }

  getMetadataPtr(): string {
    return this.value2;
  }

  getReferralShare(): BigInt {
    return this.value3;
  }

  getExist(): boolean {
    return this.value4;
  }

  getId(): BigInt {
    return this.value5;
  }

  getCollectModule(): Address {
    return this.value6;
  }

  getPubId(): BigInt {
    return this.value7;
  }
}

export class NetworkManager extends ethereum.SmartContract {
  static bind(address: Address): NetworkManager {
    return new NetworkManager("NetworkManager", address);
  }

  LENS_CONTENT_REFERENCE_MODULE(): Address {
    let result = super.call(
      "LENS_CONTENT_REFERENCE_MODULE",
      "LENS_CONTENT_REFERENCE_MODULE():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_LENS_CONTENT_REFERENCE_MODULE(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "LENS_CONTENT_REFERENCE_MODULE",
      "LENS_CONTENT_REFERENCE_MODULE():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  LENS_FOLLOW_MODULE(): Address {
    let result = super.call(
      "LENS_FOLLOW_MODULE",
      "LENS_FOLLOW_MODULE():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_LENS_FOLLOW_MODULE(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "LENS_FOLLOW_MODULE",
      "LENS_FOLLOW_MODULE():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _dai(): Address {
    let result = super.call("_dai", "_dai():(address)", []);

    return result[0].toAddress();
  }

  try__dai(): ethereum.CallResult<Address> {
    let result = super.tryCall("_dai", "_dai():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _tokenFactory(): Address {
    let result = super.call("_tokenFactory", "_tokenFactory():(address)", []);

    return result[0].toAddress();
  }

  try__tokenFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_tokenFactory",
      "_tokenFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addressToLensProfileId(param0: Address): BigInt {
    let result = super.call(
      "addressToLensProfileId",
      "addressToLensProfileId(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_addressToLensProfileId(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addressToLensProfileId",
      "addressToLensProfileId(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  arbitrationFeeDepositPeriod(): BigInt {
    let result = super.call(
      "arbitrationFeeDepositPeriod",
      "arbitrationFeeDepositPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_arbitrationFeeDepositPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "arbitrationFeeDepositPeriod",
      "arbitrationFeeDepositPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  arbitrator(): Address {
    let result = super.call("arbitrator", "arbitrator():(address)", []);

    return result[0].toAddress();
  }

  try_arbitrator(): ethereum.CallResult<Address> {
    let result = super.tryCall("arbitrator", "arbitrator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createContract(marketId: BigInt, taskMetadataPtr: string): BigInt {
    let result = super.call(
      "createContract",
      "createContract(uint256,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromString(taskMetadataPtr)
      ]
    );

    return result[0].toBigInt();
  }

  try_createContract(
    marketId: BigInt,
    taskMetadataPtr: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createContract",
      "createContract(uint256,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromString(taskMetadataPtr)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createService(
    marketId: BigInt,
    metadataPtr: string,
    offers: Array<BigInt>,
    referralSharePayout: BigInt,
    lensTalentServiceCollectModule: Address
  ): BigInt {
    let result = super.call(
      "createService",
      "createService(uint256,string,uint256[],uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromString(metadataPtr),
        ethereum.Value.fromUnsignedBigIntArray(offers),
        ethereum.Value.fromUnsignedBigInt(referralSharePayout),
        ethereum.Value.fromAddress(lensTalentServiceCollectModule)
      ]
    );

    return result[0].toBigInt();
  }

  try_createService(
    marketId: BigInt,
    metadataPtr: string,
    offers: Array<BigInt>,
    referralSharePayout: BigInt,
    lensTalentServiceCollectModule: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createService",
      "createService(uint256,string,uint256[],uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromString(metadataPtr),
        ethereum.Value.fromUnsignedBigIntArray(offers),
        ethereum.Value.fromUnsignedBigInt(referralSharePayout),
        ethereum.Value.fromAddress(lensTalentServiceCollectModule)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  disputeIDtoRelationshipID(param0: BigInt): BigInt {
    let result = super.call(
      "disputeIDtoRelationshipID",
      "disputeIDtoRelationshipID(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_disputeIDtoRelationshipID(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "disputeIDtoRelationshipID",
      "disputeIDtoRelationshipID(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContractData(
    contractId: BigInt
  ): NetworkManager__getContractDataResultValue0Struct {
    let result = super.call(
      "getContractData",
      "getContractData(uint256):((address,address,string,uint8,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(contractId)]
    );

    return changetype<NetworkManager__getContractDataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getContractData(
    contractId: BigInt
  ): ethereum.CallResult<NetworkManager__getContractDataResultValue0Struct> {
    let result = super.tryCall(
      "getContractData",
      "getContractData(uint256):((address,address,string,uint8,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(contractId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NetworkManager__getContractDataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getContracts(): Array<NetworkManager__getContractsResultValue0Struct> {
    let result = super.call(
      "getContracts",
      "getContracts():((address,address,string,uint8,uint256,uint256,uint256,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      NetworkManager__getContractsResultValue0Struct
    >();
  }

  try_getContracts(): ethereum.CallResult<
    Array<NetworkManager__getContractsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getContracts",
      "getContracts():((address,address,string,uint8,uint256,uint256,uint256,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<NetworkManager__getContractsResultValue0Struct>()
    );
  }

  getLensProfileIdFromAddress(account: Address): BigInt {
    let result = super.call(
      "getLensProfileIdFromAddress",
      "getLensProfileIdFromAddress(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getLensProfileIdFromAddress(
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLensProfileIdFromAddress",
      "getLensProfileIdFromAddress(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProtocolFee(): BigInt {
    let result = super.call("getProtocolFee", "getProtocolFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getProtocolFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProtocolFee",
      "getProtocolFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPubIdFromServiceId(serviceId: BigInt): BigInt {
    let result = super.call(
      "getPubIdFromServiceId",
      "getPubIdFromServiceId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(serviceId)]
    );

    return result[0].toBigInt();
  }

  try_getPubIdFromServiceId(serviceId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPubIdFromServiceId",
      "getPubIdFromServiceId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(serviceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPurchaseIdFromServiceId(serviceId: BigInt): BigInt {
    let result = super.call(
      "getPurchaseIdFromServiceId",
      "getPurchaseIdFromServiceId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(serviceId)]
    );

    return result[0].toBigInt();
  }

  try_getPurchaseIdFromServiceId(
    serviceId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPurchaseIdFromServiceId",
      "getPurchaseIdFromServiceId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(serviceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getServiceData(
    serviceId: BigInt
  ): NetworkManager__getServiceDataResultValue0Struct {
    let result = super.call(
      "getServiceData",
      "getServiceData(uint256):((uint256,address,string,uint256[],uint256,bool,uint256,address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(serviceId)]
    );

    return changetype<NetworkManager__getServiceDataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getServiceData(
    serviceId: BigInt
  ): ethereum.CallResult<NetworkManager__getServiceDataResultValue0Struct> {
    let result = super.tryCall(
      "getServiceData",
      "getServiceData(uint256):((uint256,address,string,uint256[],uint256,bool,uint256,address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(serviceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NetworkManager__getServiceDataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getServicePurchaseMetadata(
    purchaseId: BigInt
  ): NetworkManager__getServicePurchaseMetadataResultValue0Struct {
    let result = super.call(
      "getServicePurchaseMetadata",
      "getServicePurchaseMetadata(uint256):((uint256,address,address,bool,uint256,address,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(purchaseId)]
    );

    return changetype<
      NetworkManager__getServicePurchaseMetadataResultValue0Struct
    >(result[0].toTuple());
  }

  try_getServicePurchaseMetadata(
    purchaseId: BigInt
  ): ethereum.CallResult<
    NetworkManager__getServicePurchaseMetadataResultValue0Struct
  > {
    let result = super.tryCall(
      "getServicePurchaseMetadata",
      "getServicePurchaseMetadata(uint256):((uint256,address,address,bool,uint256,address,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(purchaseId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NetworkManager__getServicePurchaseMetadataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getServices(): Array<NetworkManager__getServicesResultValue0Struct> {
    let result = super.call(
      "getServices",
      "getServices():((uint256,address,string,uint256[],uint256,bool,uint256,address,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      NetworkManager__getServicesResultValue0Struct
    >();
  }

  try_getServices(): ethereum.CallResult<
    Array<NetworkManager__getServicesResultValue0Struct>
  > {
    let result = super.tryCall(
      "getServices",
      "getServices():((uint256,address,string,uint256[],uint256,bool,uint256,address,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<NetworkManager__getServicesResultValue0Struct>()
    );
  }

  getVerifiedFreelancers(): Array<Address> {
    let result = super.call(
      "getVerifiedFreelancers",
      "getVerifiedFreelancers():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getVerifiedFreelancers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getVerifiedFreelancers",
      "getVerifiedFreelancers():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isRegisteredUser(account: Address): boolean {
    let result = super.call(
      "isRegisteredUser",
      "isRegisteredUser(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_isRegisteredUser(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRegisteredUser",
      "isRegisteredUser(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lensHub(): Address {
    let result = super.call("lensHub", "lensHub():(address)", []);

    return result[0].toAddress();
  }

  try_lensHub(): ethereum.CallResult<Address> {
    let result = super.tryCall("lensHub", "lensHub():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxyProfileCreator(): Address {
    let result = super.call(
      "proxyProfileCreator",
      "proxyProfileCreator():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_proxyProfileCreator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "proxyProfileCreator",
      "proxyProfileCreator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  purchaseServiceOffering(
    serviceId: BigInt,
    referral: Address,
    offerIndex: i32,
    sig: NetworkManager__purchaseServiceOfferingInputSigStruct
  ): BigInt {
    let result = super.call(
      "purchaseServiceOffering",
      "purchaseServiceOffering(uint256,address,uint8,(uint8,bytes32,bytes32,uint256)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(serviceId),
        ethereum.Value.fromAddress(referral),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(offerIndex)),
        ethereum.Value.fromTuple(sig)
      ]
    );

    return result[0].toBigInt();
  }

  try_purchaseServiceOffering(
    serviceId: BigInt,
    referral: Address,
    offerIndex: i32,
    sig: NetworkManager__purchaseServiceOfferingInputSigStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "purchaseServiceOffering",
      "purchaseServiceOffering(uint256,address,uint8,(uint8,bytes32,bytes32,uint256)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(serviceId),
        ethereum.Value.fromAddress(referral),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(offerIndex)),
        ethereum.Value.fromTuple(sig)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  purchasedServiceIdToMetdata(
    param0: BigInt
  ): NetworkManager__purchasedServiceIdToMetdataResult {
    let result = super.call(
      "purchasedServiceIdToMetdata",
      "purchasedServiceIdToMetdata(uint256):(uint256,address,address,bool,uint256,address,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NetworkManager__purchasedServiceIdToMetdataResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBoolean(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toI32(),
      result[7].toI32()
    );
  }

  try_purchasedServiceIdToMetdata(
    param0: BigInt
  ): ethereum.CallResult<NetworkManager__purchasedServiceIdToMetdataResult> {
    let result = super.tryCall(
      "purchasedServiceIdToMetdata",
      "purchasedServiceIdToMetdata(uint256):(uint256,address,address,bool,uint256,address,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NetworkManager__purchasedServiceIdToMetdataResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBoolean(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toI32(),
        value[7].toI32()
      )
    );
  }

  relationshipIDToEscrowDetails(
    param0: BigInt
  ): NetworkManager__relationshipIDToEscrowDetailsResult {
    let result = super.call(
      "relationshipIDToEscrowDetails",
      "relationshipIDToEscrowDetails(uint256):(uint8,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NetworkManager__relationshipIDToEscrowDetailsResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_relationshipIDToEscrowDetails(
    param0: BigInt
  ): ethereum.CallResult<NetworkManager__relationshipIDToEscrowDetailsResult> {
    let result = super.tryCall(
      "relationshipIDToEscrowDetails",
      "relationshipIDToEscrowDetails(uint256):(uint8,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NetworkManager__relationshipIDToEscrowDetailsResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  relationshipIDToMarketID(param0: BigInt): BigInt {
    let result = super.call(
      "relationshipIDToMarketID",
      "relationshipIDToMarketID(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_relationshipIDToMarketID(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "relationshipIDToMarketID",
      "relationshipIDToMarketID(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  relationshipIDToRelationship(
    param0: BigInt
  ): NetworkManager__relationshipIDToRelationshipResult {
    let result = super.call(
      "relationshipIDToRelationship",
      "relationshipIDToRelationship(uint256):(address,address,string,uint8,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NetworkManager__relationshipIDToRelationshipResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_relationshipIDToRelationship(
    param0: BigInt
  ): ethereum.CallResult<NetworkManager__relationshipIDToRelationshipResult> {
    let result = super.tryCall(
      "relationshipIDToRelationship",
      "relationshipIDToRelationship(uint256):(address,address,string,uint8,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NetworkManager__relationshipIDToRelationshipResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  relationships(param0: BigInt): NetworkManager__relationshipsResult {
    let result = super.call(
      "relationships",
      "relationships(uint256):(address,address,string,uint8,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NetworkManager__relationshipsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_relationships(
    param0: BigInt
  ): ethereum.CallResult<NetworkManager__relationshipsResult> {
    let result = super.tryCall(
      "relationships",
      "relationships(uint256):(address,address,string,uint8,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NetworkManager__relationshipsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  remainingTimeToDepositArbitrationFee(contractId: BigInt): BigInt {
    let result = super.call(
      "remainingTimeToDepositArbitrationFee",
      "remainingTimeToDepositArbitrationFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(contractId)]
    );

    return result[0].toBigInt();
  }

  try_remainingTimeToDepositArbitrationFee(
    contractId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "remainingTimeToDepositArbitrationFee",
      "remainingTimeToDepositArbitrationFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(contractId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  serviceIDToMarketID(param0: BigInt): BigInt {
    let result = super.call(
      "serviceIDToMarketID",
      "serviceIDToMarketID(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_serviceIDToMarketID(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "serviceIDToMarketID",
      "serviceIDToMarketID(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  serviceIdToPublicationId(param0: BigInt): BigInt {
    let result = super.call(
      "serviceIdToPublicationId",
      "serviceIdToPublicationId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_serviceIdToPublicationId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "serviceIdToPublicationId",
      "serviceIdToPublicationId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  serviceIdToPurchaseId(param0: BigInt): BigInt {
    let result = super.call(
      "serviceIdToPurchaseId",
      "serviceIdToPurchaseId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_serviceIdToPurchaseId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "serviceIdToPurchaseId",
      "serviceIdToPurchaseId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  serviceIdToService(param0: BigInt): NetworkManager__serviceIdToServiceResult {
    let result = super.call(
      "serviceIdToService",
      "serviceIdToService(uint256):(uint256,address,string,uint256,bool,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NetworkManager__serviceIdToServiceResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toBigInt()
    );
  }

  try_serviceIdToService(
    param0: BigInt
  ): ethereum.CallResult<NetworkManager__serviceIdToServiceResult> {
    let result = super.tryCall(
      "serviceIdToService",
      "serviceIdToService(uint256):(uint256,address,string,uint256,bool,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NetworkManager__serviceIdToServiceResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toBigInt()
      )
    );
  }

  services(param0: BigInt): NetworkManager__servicesResult {
    let result = super.call(
      "services",
      "services(uint256):(uint256,address,string,uint256,bool,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NetworkManager__servicesResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toBigInt()
    );
  }

  try_services(
    param0: BigInt
  ): ethereum.CallResult<NetworkManager__servicesResult> {
    let result = super.tryCall(
      "services",
      "services(uint256):(uint256,address,string,uint256,bool,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NetworkManager__servicesResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toBigInt()
      )
    );
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  verifiedFreelancers(param0: BigInt): Address {
    let result = super.call(
      "verifiedFreelancers",
      "verifiedFreelancers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_verifiedFreelancers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "verifiedFreelancers",
      "verifiedFreelancers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateContractCall extends ethereum.Call {
  get inputs(): CreateContractCall__Inputs {
    return new CreateContractCall__Inputs(this);
  }

  get outputs(): CreateContractCall__Outputs {
    return new CreateContractCall__Outputs(this);
  }
}

export class CreateContractCall__Inputs {
  _call: CreateContractCall;

  constructor(call: CreateContractCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get taskMetadataPtr(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreateContractCall__Outputs {
  _call: CreateContractCall;

  constructor(call: CreateContractCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateServiceCall extends ethereum.Call {
  get inputs(): CreateServiceCall__Inputs {
    return new CreateServiceCall__Inputs(this);
  }

  get outputs(): CreateServiceCall__Outputs {
    return new CreateServiceCall__Outputs(this);
  }
}

export class CreateServiceCall__Inputs {
  _call: CreateServiceCall;

  constructor(call: CreateServiceCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get metadataPtr(): string {
    return this._call.inputValues[1].value.toString();
  }

  get offers(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get referralSharePayout(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get lensTalentServiceCollectModule(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class CreateServiceCall__Outputs {
  _call: CreateServiceCall;

  constructor(call: CreateServiceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositArbitrationFeeForPayeeCall extends ethereum.Call {
  get inputs(): DepositArbitrationFeeForPayeeCall__Inputs {
    return new DepositArbitrationFeeForPayeeCall__Inputs(this);
  }

  get outputs(): DepositArbitrationFeeForPayeeCall__Outputs {
    return new DepositArbitrationFeeForPayeeCall__Outputs(this);
  }
}

export class DepositArbitrationFeeForPayeeCall__Inputs {
  _call: DepositArbitrationFeeForPayeeCall;

  constructor(call: DepositArbitrationFeeForPayeeCall) {
    this._call = call;
  }

  get contractId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositArbitrationFeeForPayeeCall__Outputs {
  _call: DepositArbitrationFeeForPayeeCall;

  constructor(call: DepositArbitrationFeeForPayeeCall) {
    this._call = call;
  }
}

export class DisputeRelationshipCall extends ethereum.Call {
  get inputs(): DisputeRelationshipCall__Inputs {
    return new DisputeRelationshipCall__Inputs(this);
  }

  get outputs(): DisputeRelationshipCall__Outputs {
    return new DisputeRelationshipCall__Outputs(this);
  }
}

export class DisputeRelationshipCall__Inputs {
  _call: DisputeRelationshipCall;

  constructor(call: DisputeRelationshipCall) {
    this._call = call;
  }

  get contractId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DisputeRelationshipCall__Outputs {
  _call: DisputeRelationshipCall;

  constructor(call: DisputeRelationshipCall) {
    this._call = call;
  }
}

export class GrantProposalRequestCall extends ethereum.Call {
  get inputs(): GrantProposalRequestCall__Inputs {
    return new GrantProposalRequestCall__Inputs(this);
  }

  get outputs(): GrantProposalRequestCall__Outputs {
    return new GrantProposalRequestCall__Outputs(this);
  }
}

export class GrantProposalRequestCall__Inputs {
  _call: GrantProposalRequestCall;

  constructor(call: GrantProposalRequestCall) {
    this._call = call;
  }

  get contractId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newWorker(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get wad(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class GrantProposalRequestCall__Outputs {
  _call: GrantProposalRequestCall;

  constructor(call: GrantProposalRequestCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get tokenFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _arbitrator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _lensHub(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _proxyProfileCreator(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _governance(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get dai(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PurchaseServiceOfferingCall extends ethereum.Call {
  get inputs(): PurchaseServiceOfferingCall__Inputs {
    return new PurchaseServiceOfferingCall__Inputs(this);
  }

  get outputs(): PurchaseServiceOfferingCall__Outputs {
    return new PurchaseServiceOfferingCall__Outputs(this);
  }
}

export class PurchaseServiceOfferingCall__Inputs {
  _call: PurchaseServiceOfferingCall;

  constructor(call: PurchaseServiceOfferingCall) {
    this._call = call;
  }

  get serviceId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get referral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get offerIndex(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get sig(): PurchaseServiceOfferingCallSigStruct {
    return changetype<PurchaseServiceOfferingCallSigStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class PurchaseServiceOfferingCall__Outputs {
  _call: PurchaseServiceOfferingCall;

  constructor(call: PurchaseServiceOfferingCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PurchaseServiceOfferingCallSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }

  get deadline(): BigInt {
    return this[3].toBigInt();
  }
}

export class RegisterWorkerCall extends ethereum.Call {
  get inputs(): RegisterWorkerCall__Inputs {
    return new RegisterWorkerCall__Inputs(this);
  }

  get outputs(): RegisterWorkerCall__Outputs {
    return new RegisterWorkerCall__Outputs(this);
  }
}

export class RegisterWorkerCall__Inputs {
  _call: RegisterWorkerCall;

  constructor(call: RegisterWorkerCall) {
    this._call = call;
  }

  get vars(): RegisterWorkerCallVarsStruct {
    return changetype<RegisterWorkerCallVarsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class RegisterWorkerCall__Outputs {
  _call: RegisterWorkerCall;

  constructor(call: RegisterWorkerCall) {
    this._call = call;
  }
}

export class RegisterWorkerCallVarsStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get handle(): string {
    return this[1].toString();
  }

  get imageURI(): string {
    return this[2].toString();
  }

  get followModule(): Address {
    return this[3].toAddress();
  }

  get followModuleInitData(): Bytes {
    return this[4].toBytes();
  }

  get followNFTURI(): string {
    return this[5].toString();
  }
}

export class ReleaseContractCall extends ethereum.Call {
  get inputs(): ReleaseContractCall__Inputs {
    return new ReleaseContractCall__Inputs(this);
  }

  get outputs(): ReleaseContractCall__Outputs {
    return new ReleaseContractCall__Outputs(this);
  }
}

export class ReleaseContractCall__Inputs {
  _call: ReleaseContractCall;

  constructor(call: ReleaseContractCall) {
    this._call = call;
  }

  get contractId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReleaseContractCall__Outputs {
  _call: ReleaseContractCall;

  constructor(call: ReleaseContractCall) {
    this._call = call;
  }
}

export class ResolveContractCall extends ethereum.Call {
  get inputs(): ResolveContractCall__Inputs {
    return new ResolveContractCall__Inputs(this);
  }

  get outputs(): ResolveContractCall__Outputs {
    return new ResolveContractCall__Outputs(this);
  }
}

export class ResolveContractCall__Inputs {
  _call: ResolveContractCall;

  constructor(call: ResolveContractCall) {
    this._call = call;
  }

  get contractId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get solutionMetadataPtr(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ResolveContractCall__Outputs {
  _call: ResolveContractCall;

  constructor(call: ResolveContractCall) {
    this._call = call;
  }
}

export class ResolveServiceCall extends ethereum.Call {
  get inputs(): ResolveServiceCall__Inputs {
    return new ResolveServiceCall__Inputs(this);
  }

  get outputs(): ResolveServiceCall__Outputs {
    return new ResolveServiceCall__Outputs(this);
  }
}

export class ResolveServiceCall__Inputs {
  _call: ResolveServiceCall;

  constructor(call: ResolveServiceCall) {
    this._call = call;
  }

  get serviceId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get purchaseId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ResolveServiceCall__Outputs {
  _call: ResolveServiceCall;

  constructor(call: ResolveServiceCall) {
    this._call = call;
  }
}

export class RuleCall extends ethereum.Call {
  get inputs(): RuleCall__Inputs {
    return new RuleCall__Inputs(this);
  }

  get outputs(): RuleCall__Outputs {
    return new RuleCall__Outputs(this);
  }
}

export class RuleCall__Inputs {
  _call: RuleCall;

  constructor(call: RuleCall) {
    this._call = call;
  }

  get disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ruling(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RuleCall__Outputs {
  _call: RuleCall;

  constructor(call: RuleCall) {
    this._call = call;
  }
}

export class SetLensContentReferenceModuleCall extends ethereum.Call {
  get inputs(): SetLensContentReferenceModuleCall__Inputs {
    return new SetLensContentReferenceModuleCall__Inputs(this);
  }

  get outputs(): SetLensContentReferenceModuleCall__Outputs {
    return new SetLensContentReferenceModuleCall__Outputs(this);
  }
}

export class SetLensContentReferenceModuleCall__Inputs {
  _call: SetLensContentReferenceModuleCall;

  constructor(call: SetLensContentReferenceModuleCall) {
    this._call = call;
  }

  get _LENS_CONTENT_REFERENCE_MODULE(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLensContentReferenceModuleCall__Outputs {
  _call: SetLensContentReferenceModuleCall;

  constructor(call: SetLensContentReferenceModuleCall) {
    this._call = call;
  }
}

export class SetLensFollowModuleCall extends ethereum.Call {
  get inputs(): SetLensFollowModuleCall__Inputs {
    return new SetLensFollowModuleCall__Inputs(this);
  }

  get outputs(): SetLensFollowModuleCall__Outputs {
    return new SetLensFollowModuleCall__Outputs(this);
  }
}

export class SetLensFollowModuleCall__Inputs {
  _call: SetLensFollowModuleCall;

  constructor(call: SetLensFollowModuleCall) {
    this._call = call;
  }

  get _LENS_FOLLOW_MODULE(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLensFollowModuleCall__Outputs {
  _call: SetLensFollowModuleCall;

  constructor(call: SetLensFollowModuleCall) {
    this._call = call;
  }
}

export class SetProtocolFeeCall extends ethereum.Call {
  get inputs(): SetProtocolFeeCall__Inputs {
    return new SetProtocolFeeCall__Inputs(this);
  }

  get outputs(): SetProtocolFeeCall__Outputs {
    return new SetProtocolFeeCall__Outputs(this);
  }
}

export class SetProtocolFeeCall__Inputs {
  _call: SetProtocolFeeCall;

  constructor(call: SetProtocolFeeCall) {
    this._call = call;
  }

  get protocolFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProtocolFeeCall__Outputs {
  _call: SetProtocolFeeCall;

  constructor(call: SetProtocolFeeCall) {
    this._call = call;
  }
}

export class SubmitEvidenceCall extends ethereum.Call {
  get inputs(): SubmitEvidenceCall__Inputs {
    return new SubmitEvidenceCall__Inputs(this);
  }

  get outputs(): SubmitEvidenceCall__Outputs {
    return new SubmitEvidenceCall__Outputs(this);
  }
}

export class SubmitEvidenceCall__Inputs {
  _call: SubmitEvidenceCall;

  constructor(call: SubmitEvidenceCall) {
    this._call = call;
  }

  get contractId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _evidence(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SubmitEvidenceCall__Outputs {
  _call: SubmitEvidenceCall;

  constructor(call: SubmitEvidenceCall) {
    this._call = call;
  }
}

export class UpdateTaskMetadataPointerCall extends ethereum.Call {
  get inputs(): UpdateTaskMetadataPointerCall__Inputs {
    return new UpdateTaskMetadataPointerCall__Inputs(this);
  }

  get outputs(): UpdateTaskMetadataPointerCall__Outputs {
    return new UpdateTaskMetadataPointerCall__Outputs(this);
  }
}

export class UpdateTaskMetadataPointerCall__Inputs {
  _call: UpdateTaskMetadataPointerCall;

  constructor(call: UpdateTaskMetadataPointerCall) {
    this._call = call;
  }

  get contractId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newPointerHash(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateTaskMetadataPointerCall__Outputs {
  _call: UpdateTaskMetadataPointerCall;

  constructor(call: UpdateTaskMetadataPointerCall) {
    this._call = call;
  }
}
